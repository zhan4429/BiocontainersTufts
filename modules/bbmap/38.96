#%Module -*- tcl -*-
# The MIT License (MIT)
# Copyright (c) 2023 Tufts University

# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

module-whatis   "Description: Bbmap is a short read aligner, as well as various other bioinformatic tools."
module-whatis   "Home page:     https://sourceforge.net/projects/bbmap"
module-whatis "Commands: addadapters.sh,a_sample_mt.sh,bbcountunique.sh,bbduk.sh,bbest.sh,bbfakereads.sh,bbmap.sh,bbmapskimmer.sh,bbmask.sh,bbmerge-auto.sh,bbmergegapped.sh,bbmerge.sh,bbnorm.sh,bbqc.sh,bbrealign.sh,bbrename.sh,bbsketch.sh,bbsplitpairs.sh,bbsplit.sh,bbstats.sh,bbversion.sh,bbwrap.sh,calcmem.sh,calctruequality.sh,callpeaks.sh,callvariants2.sh,callvariants.sh,clumpify.sh,commonkmers.sh,comparesketch.sh,comparevcf.sh,consect.sh,countbarcodes.sh,countgc.sh,countsharedlines.sh,crossblock.sh,crosscontaminate.sh,cutprimers.sh,decontaminate.sh,dedupe2.sh,dedupebymapping.sh,dedupe.sh,demuxbyname.sh,diskbench.sh,estherfilter.sh,explodetree.sh,filterassemblysummary.sh,filterbarcodes.sh,filterbycoverage.sh,filterbyname.sh,filterbysequence.sh,filterbytaxa.sh,filterbytile.sh,filterlines.sh,filtersam.sh,filtersubs.sh,filtervcf.sh,fungalrelease.sh,fuse.sh,getreads.sh,gi2ancestors.sh,gi2taxid.sh,gitable.sh,grademerge.sh,gradesam.sh,idmatrix.sh,idtree.sh,invertkey.sh,kcompress.sh,khist.sh,kmercountexact.sh,kmercountmulti.sh,kmercoverage.sh,loadreads.sh,loglog.sh,makechimeras.sh,makecontaminatedgenomes.sh,makepolymers.sh,mapPacBio.sh,matrixtocolumns.sh,mergebarcodes.sh,mergeOTUs.sh,mergesam.sh,msa.sh,mutate.sh,muxbyname.sh,normandcorrectwrapper.sh,partition.sh,phylip2fasta.sh,pileup.sh,plotgc.sh,postfilter.sh,printtime.sh,processfrag.sh,processspeed.sh,randomreads.sh,readlength.sh,reducesilva.sh,reformat.sh,removebadbarcodes.sh,removecatdogmousehuman.sh,removehuman2.sh,removehuman.sh,removemicrobes.sh,removesmartbell.sh,renameimg.sh,rename.sh,repair.sh,replaceheaders.sh,representative.sh,rqcfilter.sh,samtoroc.sh,seal.sh,sendsketch.sh,shred.sh,shrinkaccession.sh,shuffle.sh,sketchblacklist.sh,sketch.sh,sortbyname.sh,splitbytaxa.sh,splitnextera.sh,splitsam4way.sh,splitsam6way.sh,splitsam.sh,stats.sh,statswrapper.sh,streamsam.sh,summarizecrossblock.sh,summarizemerge.sh,summarizequast.sh,summarizescafstats.sh,summarizeseal.sh,summarizesketch.sh,synthmda.sh,tadpipe.sh,tadpole.sh,tadwrapper.sh,taxonomy.sh,taxserver.sh,taxsize.sh,taxtree.sh,testfilesystem.sh,testformat2.sh,testformat.sh,tetramerfreq.sh,textfile.sh,translate6frames.sh,unicode2ascii.sh,webcheck.sh"
module-whatis   "BioContainers: https://biocontainers.pro/tools/bbmap"

set pkg bbmap 
set ver 38.96

proc ModulesHelp { } {
  puts stderr "\tThis module adds bbmap v38.96 to the environment.  It runs as a container under singularity"
}

#
# prepend-path and set SINGULARITY_BIND
#
prepend-path PATH            /cluster/tufts/biocontainers/tools/bbmap/38.96/bin
prepend-path --delim=, SINGULARITY_BIND /cluster/tufts

#
# set environment variable
#


#
# list conflict modules that cannot be loaded together
#
set conflicts_modules {bbmap BBMap}
foreach a_conflict $conflicts_modules {
  conflict $a_conflict
}

#
# appended log section
# 

if {[module-info mode "load"]} {
  global env
  if {[info exists env(USER)]} {
    set the_user [lindex [array get env USER] 1]
  } else {
    set the_user "foo"
  }
  system [concat "logger environment-modules" [module-info name] $the_user ]
}

set additional_prereqs {"singularity"}
if {[module-info mode "load"]} {
  foreach a_module $additional_prereqs {
    if {![is-loaded $a_module]} {
      module load $a_module
    }
  }
}
